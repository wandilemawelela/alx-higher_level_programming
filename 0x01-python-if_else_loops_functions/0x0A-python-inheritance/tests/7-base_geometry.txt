"""
Base Geometry Module
===================

This module defines the BaseGeometry class.

Using BaseGeometry
------------------

First, import the BaseGeometry class from the '7-base_geometry' module:

    >>> BaseGeometry = __import__('7-base_geometry').BaseGeometry

Example usage:

    >>> bg = BaseGeometry()
    >>> type(bg)
    <class '7-base_geometry.BaseGeometry'>

Class Methods
-------------

The BaseGeometry class should define the following methods:

- `area`: Calculates the area of the geometry. Not implemented by default.

- `integer_validator(name, value)`: Validates that the value is an integer
  greater than 0.

Public Method Check
-------------------

Check if the methods are public:

    >>> 'area' in dir(BaseGeometry)
    True

    >>> 'integer_validator' in dir(BaseGeometry)
    True

No Instance Attributes or Methods
---------------------------------

Check if there are no instance attributes or methods:

    >>> dir(bg) == dir(BaseGeometry)
    True

Testing 'area' Method
---------------------

When 'area' method is called (not implemented), it raises an exception:

    >>> bg.area()
    Traceback (most recent call last):
    Exception: area() is not implemented

Testing 'integer_validator' Method
---------------------------------

'integer_validator' method expects two arguments:

    >>> bg.integer_validator()
    Traceback (most recent call last):
    TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

    >>> bg.integer_validator(1)
    Traceback (most recent call last):
    TypeError: integer_validator() missing 1 required positional argument: 'value'

    >>> bg.integer_validator(1, 2, 3)
    Traceback (most recent call last):
    TypeError: integer_validator() takes 3 positional arguments but 4 were given

Testing 'integer_validator' Method for Type Checking
---------------------------------------------------

The 'integer_validator' method should raise a TypeError when the value is not an integer:

    >>> def test_i(tests=[]):
    ...     for test in tests:
    ...         try:
    ...             bg.integer_validator("name", test)
    ...         except Exception as e:
    ...             print("[{}] {} for type {}".format(e.__class__.__name__, e, type(test)))

    >>> tests = [True, 1.24, -76.87, set(), [1, 2], "a string", {"a":1}, ("11", 3), test_i, bg, BaseGeometry, None]
    >>> test_i(tests)
    [TypeError] name must be an integer for type <class 'bool'>
    [TypeError] name must be an integer for type <class 'float'>
    [TypeError] name must be an integer for type <class 'float'>
    [TypeError] name must be an integer for type <class 'set'>
    [TypeError] name must be an integer for type <class 'list'>
    [TypeError] name must be an integer for type <class 'str'>
    [TypeError] name must be an integer for type <class 'dict'>
    [TypeError] name must be an integer for type <class 'tuple'>
    [TypeError] name must be an integer for type <class 'function'>
    [TypeError] name must be an integer for type <class '7-base_geometry.BaseGeometry'>
    [TypeError] name must be an integer for type <class 'type'>
    [TypeError] name must be an integer for type <class 'NoneType'>

Testing 'integer_validator' Method for Sign Checking
---------------------------------------------------

The 'integer_validator' method should raise a ValueError when the value is less than or equal to 0:

    >>> bg.integer_validator("name", -23)
    Traceback (most recent call last):
    ValueError: name must be greater than 0

    >>> bg.integer_validator("name", 0)
    Traceback (most recent call last):
    ValueError: name must be greater than 0

When the method works correctly, it does not return anything:

    >>> bg.integer_validator("name", 3)
